@using SmartCode
@using SmartCode.Db
@model BuildContext
@{
    var project = Model.Project;
    var dbSource = Model.GetDataSource<DbSource>();
    var buildTask = Model.Build;
    var loadDbProvider = "";
    var loadConnectionString = "";
    string extractMode = "QueryTime";//Last: MaxId,QueryTime
    Model.Project.Paramters?.Value("ExtractMode", out extractMode);
    bool extractModeIsLastQueryTime = extractMode == "QueryTime";
    project.Paramters?.Value("LoadDbProvider", out loadDbProvider);
    project.Paramters?.Value("LoadConnectionString", out loadConnectionString);
    var table = Model.GetCurrentTable();
    var loadTable = extractModeIsLastQueryTime ? $"{table.ConvertedName}__temp" : table.ConvertedName;
    var PKColumn = Model.GetCurrentTable()?.PKColumn;
}

@functions{
    string GetExtractWhere()
    {
        string extractMode = String.Empty;
        Model.Project.Paramters?.Value("ExtractMode", out extractMode);
        if (extractMode == "MaxId")
        {
            return $"{Model.GetCurrentTable().PKColumn.Name}>@LastMaxId";
        }
        string modifyTime = String.Empty;
        Model.Project.Paramters?.Value("ModifyTime", out modifyTime);
        return $"{modifyTime}>@LastQueryTime";
    }
}

Author: Ahoo Wang
DataSource:
  Name: Extract
  Paramters:
    DbProvider: @dbSource.DbRepository.DbProviderName
    ConnectionString: "@dbSource.Database.WriteDataSource.ConnectionString"
    Query: 'Select * From @table.Name  With(NoLock) Where @GetExtractWhere()'
    PKColumn: @PKColumn.Name
    PkIsNumeric: true

Paramters:
  ETLCode: @(project.Module).@table.Name
  ETLRepository: PG

Build:

  Transform:
    Type: Transform
      Paramters:
       Script:

  Load:
    Type: Load
      Paramters:
      DbProvider: @loadDbProvider
      ConnectionString: "@loadConnectionString"
      Table: @loadTable
      ColumnMapping: [
    @for (var colIndex = 0; colIndex < table.Columns.Count(); colIndex++)
    {
        var col = table.Columns.ElementAt(colIndex);
        <text>{Column: @col.Name,Mapping: @col.ConvertedName}</text>
        if (colIndex < table.Columns.Count() - 1)
        {@(",")}
    @Html.NewLine()
}
    ]
    @if (extractModeIsLastQueryTime)
    {
        <text>
       PreCommand: CREATE TABLE @(loadTable)( LIKE @table.ConvertedName );
       PostCommand: "Delete From @table.ConvertedName as source Where EXISTS(select * from @(loadTable) temp where temp.@(PKColumn.ConvertedName)=source.@(PKColumn.ConvertedName));
            Insert Into @table.ConvertedName  SELECT * From @loadTable;
            Drop Table @loadTable;"
        </text>
    }