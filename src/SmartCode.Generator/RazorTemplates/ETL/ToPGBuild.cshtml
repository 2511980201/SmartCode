@using SmartCode
@using SmartCode.Db
@model BuildContext
@{
    var project = Model.Project;
    var dbSource = Model.GetDataSource<DbSource>();
    var buildTask = Model.Build;
    var loadDbProvider = "";
    var loadConnectionString = "";
    buildTask.Paramters?.Value("LoadDbProvider", out loadDbProvider);
    buildTask.Paramters?.Value("LoadConnectionString", out loadConnectionString);
    var table = Model.GetCurrentTable();
    var loadTableTemp = $"{table.ConvertedName}__temp";
}

Author: Ahoo Wang
DataSource:
  Name: Extract
  Paramters:
    DbProvider: @dbSource.DbRepository.DbProviderName
    ConnectionString: "@dbSource.Database.WriteDataSource.ConnectionString"
    Query: 'Select * From @table.Name  With(NoLock) Where MotifyTime>@@LastQueryTime And Id>@@LastMaxId'
    PKColumn: Id

Paramters:
  ETLCode: @(buildTask.Module).@table.Name
  ETLRepository: PG

Build:

  Transform:
    Type: Transform
    Paramters:
      Script:

  Load:
    Type: Load
    Paramters:
      DbProvider: @loadDbProvider
      ConnectionString: "@loadConnectionString"
      Table: @loadTableTemp
      ColumnMapping: [
    @for (var colIndex = 0; colIndex < table.Columns.Count(); colIndex++)
    {
        var col = table.Columns.ElementAt(colIndex);
        <text>{Column: @col.Name,Mapping: @col.ConvertedName}</text>
        if (colIndex < table.Columns.Count() - 1)
        {@(",")}
        @Html.NewLine()
}
    ]
      PreCommand: CREATE TABLE @(loadTableTemp)( LIKE @table.ConvertedName );
      PostCommand: "Delete From @table.ConvertedName as source Where EXISTS(select * from @(loadTableTemp) temp where temp.id=source.id);
      Insert Into @table.ConvertedName  SELECT * From @loadTableTemp;
      Drop Table @loadTableTemp;"


