@using SmartCode
@using SmartCode.Db;
@model BuildContext
@{
    Layout = "_CSharpLayout.cshtml";
    var project = Model.Project;
    var buildTask = Model.Build;
    var table = Model.GetCurrentTable();
    var pkCol = table.PKColumn;
    var primaryKeyType = pkCol?.LanguageType ?? "int";
    var pkColConvertName = pkCol?.ConvertedName ?? "Id";
    var isNamedId = pkColConvertName == "Id";
    var autoIncrement = table.AutoIncrement;
    var dbSource = Model.GetDataSource<DbSource>();
}

using System;
using System.Collections.Generic;
using System.Data;
using System.Text;
using SmartSql.Abstractions;
using SmartSql.DyRepository;
using @(project.Module).Entity;

namespace @(project.Module).@buildTask.Module
{
    public interface I@(table.ConvertedName)Repository : IRepository<@(table.ConvertedName), @(primaryKeyType)>
    {
    @if (dbSource.DbRepository.DbProvider == DbProvider.PostgreSql && autoIncrement)
    {
        @Html.PadLeft(8) <text>[Statement(Execute = ExecuteBehavior.QuerySingle)]</text>
        @Html.NewLine()
        @Html.PadLeft(8) <text>new @primaryKeyType Insert(@table.ConvertedName entity);</text>
        @Html.NewLine()
    }
    else if (autoIncrement && primaryKeyType != "int")
    {
        @Html.PadLeft(8) <text>new @primaryKeyType Insert(@table.ConvertedName entity);</text>
        @Html.NewLine()
    }

    @if (!isNamedId)
    {
        @Html.PadLeft(8) <text>[Statement(Id = "GetEntity")]</text>
        @Html.NewLine()
        @Html.PadLeft(8) <text>new @(table.ConvertedName) GetById([Param("@(pkColConvertName)")]long id);</text>
        @Html.NewLine()
        @Html.PadLeft(8) <text>[Statement(Id = "Delete")]</text>
        @Html.NewLine()
        @Html.PadLeft(8) <text>new int DeleteById([Param("@(pkColConvertName)")]long id);</text>
        @Html.NewLine()
    }
    }
    }
